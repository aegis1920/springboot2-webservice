language: java
jdk:
  - openjdk8

# master 브랜치에 push될 때 실행
branches:
  only:
    - master

# Travis CI 서버의 home
# 의존성들을 해당 디렉토리에 캐시해 다음 배포 때 다시 받지 않도록 설정
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

# push될 때 수행하는 스크립트
script: "./gradlew clean build"

# deploy 명령어 실행 전 수행. CodeDeploy는 Jar를 못 읽기 때문에 zip으로 만들어준다.
# mkdir -p 옵션은 그 자리에서 디렉토리 생성
before_deploy:
  - mkdir -p before-deploy # zip에 포함시킬 파일을 담을 디렉토리 생성
  - cp scripts/*.sh before-deploy/
  - cp appspec.yml before-deploy/
  - cp build/libs/*.jar before-deploy/
  - cd before-deploy && zip -r before-deploy * # before-deploy로 이동 후 전체 압축
  - cd ../ && mkdir -p deploy # 상위 디렉토리로 이동 후 deploy 디렉토리 생성
  - mv before-deploy/before-deploy.zip deploy/springboot2-webservice.zip # deploy로 zip 파일 이동

deploy:
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: $AWS_SECRET_KEY # Travis repo settings에 설정된 값
    bucket: springbootservice-build # s3 버켓
    region: ap-northeast-2
    skip_cleanup: true
    acl: private # zip 파일 접근을 private으로
    local_dir: deploy # before_deploy에서 생성한 디렉토리
    wait-until-deployed: true

  - provider: codedeploy
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: $AWS_SECRET_KEY # Travis repo settings에 설정된 값
    bucket: springbootservice-build # s3 버켓
    key: springboot2-webservice.zip # 빌드 파일을 압축해서 전달
    bundle_type: zip
    application: springboot2-webservice
    deployment_group: springboot2-webservice-group
    region: ap-northeast-2
    wait-until-deployed: true

# CI 실행 완료 시 메일로 알람
notifications:
  email:
    recipients:
      - aegis1920@gmail.com